high_time <- 0 # выше нормы
n <- (length(time_vector)-1) # вектор для цикла расчета уровня глюкозы
for(i in 1:n){
# разница во времени между соседними значениями
time_local <- time_vector[i+1]-time_vector[i]
if(is.na(time_local) || is.na(glucose_vector[i])) {next}
# суммарное время
sum_time <- sum_time + time_local
if(time_local <= 16){
# считаем площади отдельных трапеций и складываем
square_glucose <- square_glucose+0.5*time_local*(glucose_vector[i]+glucose_vector[i+1])
# считаем временные отрезки и складываем
if(glucose_vector[i+1] >= glucose_vector[i]){ # при возрастающем или стабильном уровне глюкозы
if(glucose_vector[i] < low_glucose){
if(glucose_vector[i+1] < low_glucose){ # весь отрезок ниже 3.9
low_time=low_time+time_local
}else{ # отрезок пересекает нижний лимит нормального уровня глюкозы 3.9
if(glucose_vector[i+1] >= low_glucose & glucose_vector[i+1] <= high_glucose){
low_time=low_time+time_local*((low_glucose - glucose_vector[i])/(glucose_vector[i+1] - glucose_vector[i]))
norm_time=norm_time+time_local*((glucose_vector[i+1] - low_glucose)/(glucose_vector[i+1] - glucose_vector[i]))
}else{ # отрезок пересекает и нижний, и верхний лимит нормального уровня глюкозы
low_time=low_time+time_local*((low_glucose - glucose_vector[i])/(glucose_vector[i+1] - glucose_vector[i]))
norm_time=norm_time+time_local*((high_glucose - low_glucose)/(glucose_vector[i+1] - glucose_vector[i]))
high_time=high_time+time_local*((glucose_vector[i+1] - high_glucose)/
(glucose_vector[i+1] - glucose_vector[i]))
}
}
}else{
if(glucose_vector[i] >= low_glucose & glucose_vector[i] <= high_glucose){
if(glucose_vector[i+1] <= high_glucose){ # весь отрезок в пределах 3.9-10.0
norm_time=norm_time+time_local
}else{ # отрезок пересекает верхний лимит уровня нормального глюкозы 10.0
norm_time=norm_time+time_local*((high_glucose - glucose_vector[i])/(glucose_vector[i+1] - glucose_vector[i]))
high_time=high_time+time_local*((glucose_vector[i+1] - high_glucose)/
(glucose_vector[i+1] - glucose_vector[i]))
}
}else{ # весь отрезок выше 10.0
high_time=high_time + time_local
}
}
}else{ # при снижающемся уровне глюкозы
if(glucose_vector[i+1] < low_glucose){
if(glucose_vector[i] < low_glucose){ # весь отрезок ниже 3.9
low_time=low_time+time_local
}else{ # отрезок пересекает нижний лимит нормального уровня глюкозы 3.9
if(glucose_vector[i] >= low_glucose & glucose_vector[i] <= high_glucose){
low_time=low_time+time_local*((low_glucose - glucose_vector[i+1])/(glucose_vector[i] - glucose_vector[i+1]))
norm_time=norm_time+time_local*((glucose_vector[i] - low_glucose)/(glucose_vector[i] - glucose_vector[i+1]))
}else{ # отрезок пересекает и нижний, и верхний лимит нормального уровня глюкозы
low_time=low_time+time_local*((low_glucose - glucose_vector[i+1])/(glucose_vector[i] - glucose_vector[i+1]))
norm_time=norm_time+time_local*((high_glucose - low_glucose)/(glucose_vector[i] - glucose_vector[i+1]))
high_time=high_time+time_local*((glucose_vector[i] - high_glucose)/
(glucose_vector[i] - glucose_vector[i+1]))
}
}
}else{
if(glucose_vector[i+1] >= low_glucose & glucose_vector[i+1] <= high_glucose){
if(glucose_vector[i] <= high_glucose){ # весь отрезок в пределах 3.9-10.0
norm_time=norm_time+time_local
}else{ # отрезок пересекает верхний лимит уровня нормального глюкозы 10.0
norm_time=norm_time+time_local*((high_glucose - glucose_vector[i+1])/
(glucose_vector[i] - glucose_vector[i+1]))
high_time=high_time+time_local*((glucose_vector[i] - high_glucose)/
(glucose_vector[i] - glucose_vector[i+1]))
}
}else{ # весь отрезок выше 10.0
high_time=high_time+time_local
}
}
}
}else{
missed_time = missed_time + time_local
}
}
data_info <- tibble("Общее время(мин.)" = sum_time %>% as.character(),
"Время пропусков(%)" = round((missed_time/sum_time)*100,0)  %>% as.character(),
"Среднее значение глюкозы" = round(square_glucose/(sum_time - missed_time),1)  %>% as.character(),
"Глюкоза ниже нормы(%)" = round((low_time/(sum_time - missed_time))*100,1)  %>% as.character(),
"Глюкоза в норме(%)" = round((norm_time/(sum_time - missed_time))*100,1)  %>% as.character(),
"Глюкоза выше нормы(%)" = round((high_time/(sum_time - missed_time))*100,1) %>% as.character())
return(data_info)
}
time_function <- function(data){
# Выбираем непустые ретроспективные данные
retro <- data %>%
filter(c(`Ретроспективные.данные.по.глюкозе.ммоль.л` != "" &
is.na(`Ретроспективные.данные.по.глюкозе.ммоль.л`) == FALSE)) %>%
select(`Отметка.времени.устройства`, `Ретроспективные.данные.по.глюкозе.ммоль.л`) %>%
rename(`Данные.по.глюкозе` = `Ретроспективные.данные.по.глюкозе.ммоль.л`)
# Выбираем непустые сканированные данные
scan <- data %>%
filter(c(`Сканирование.уровня.глюкозы.ммоль.л` != "" & is.na(`Сканирование.уровня.глюкозы.ммоль.л`) == FALSE)) %>%
select(`Отметка.времени.устройства`, `Сканирование.уровня.глюкозы.ммоль.л`) %>%
rename(`Данные.по.глюкозе` = `Сканирование.уровня.глюкозы.ммоль.л`)
# Объединяем данные о глюкозе
glucose_level <- bind_rows(retro, scan)
# Упорядочиваем данные по времени
glucose_level <- glucose_level %>%
arrange(`Отметка.времени.устройства`)
# Переводим формат времени в секунды (начиная от 01.01.1970)
glucose_level <-  glucose_level %>%
mutate(`Отметка.времени.устройства` = as.POSIXct(`Отметка.времени.устройства`, format = "%Y-%m-%d %H:%M:%S") %>%
as.numeric())
# Посчитаем количество записей измерений глюкозы, длительность всей записи и обнулим data.frame по временным периодам
nr <- nrow(glucose_level)
recording_duration <- as.numeric(glucose_level$`Отметка.времени.устройства`[nr]) -
as.numeric(glucose_level$`Отметка.времени.устройства`[1])
time_period_1 <- data.frame("", "")
time_period_2 <- data.frame("", "")
time_period_3 <- data.frame("", "")
# Выбираем из данных о глюкозе временные периоды по 2 недели - в начале исследования, через 1 месяц (30 дней) и через полгода   (180 дней)
ifelse(
## Для пациентов с периодом наблюдения менее 14 дней (86400 - количество секунд в сутках)
recording_duration < (86400 * 14),
time_period_1 <- glucose_level,
## Для пациентов с периодом наблюдения от 14 до 43 дней
if((recording_duration >= 86400 * 14) & (recording_duration < 86400 * 44)){
time_period_1 <- glucose_level %>% filter(glucose_level$`Отметка.времени.устройства` -
glucose_level$`Отметка.времени.устройства`[1] <= 86400 * 14)
if(nrow(time_period_1) <= 2){time_period_1 <- data.frame("", "")} ## Проверяем полученный временной период на длительность - не менее 3 измерений
}else{
## Для пациентов с периодом наблюдения от 44 до 193 дней
if((recording_duration >= 6400 * 44) & (recording_duration < 86400 * 194)){
time_period_1 <- glucose_level %>% filter(glucose_level$`Отметка.времени.устройства` -
glucose_level$`Отметка.времени.устройства`[1] <= 86400 * 14)
if(nrow(time_period_1) <= 2){time_period_1 <- data.frame("", "")} ## Проверяем полученный временной период на длительность - не менее 3 измерений (далее - аналогично)
time_period_2 <- glucose_level %>% filter((glucose_level$`Отметка.времени.устройства` -
glucose_level$`Отметка.времени.устройства`[1] > 86400 * 30) &
(glucose_level$`Отметка.времени.устройства` -
glucose_level$`Отметка.времени.устройства`[1] <= 86400 * 44))
if(nrow(time_period_2) <= 2){time_period_2 <- data.frame("", "")}
}else{
## Для пациентов с периодом наблюдения от 194 дней и более
time_period_1 <- glucose_level %>% filter(glucose_level$`Отметка.времени.устройства` -
glucose_level$`Отметка.времени.устройства`[1] <= 86400 * 14)
if(nrow(time_period_1) <= 2){time_period_1 <- data.frame("", "")}
time_period_2 <- glucose_level %>% filter((glucose_level$`Отметка.времени.устройства` -
glucose_level$`Отметка.времени.устройства`[1] > 86400 * 30) &
(glucose_level$`Отметка.времени.устройства` -
glucose_level$`Отметка.времени.устройства`[1] <= 86400 * 44))
if(nrow(time_period_2) <= 2){time_period_2 <- data.frame("", "")}
time_period_3 <- glucose_level %>% filter((glucose_level$`Отметка.времени.устройства` -
glucose_level$`Отметка.времени.устройства`[1] > 86400 * 180) &
(glucose_level$`Отметка.времени.устройства` -
glucose_level$`Отметка.времени.устройства`[1] <= 86400 * 194))
if(nrow(time_period_3) <= 2){time_period_3 <- data.frame("", "")}
}
}
)
return(c(`time_period_1`, `time_period_2`, `time_period_3`))
}
# Обнулим data.frame по трем интересующим нас периодам времени
first_week <- data.frame("Общее время(мин.)" = "",
"Время пропусков(%)" = "",
"Среднее значение глюкозы" = "",
"Глюкоза ниже нормы(%)" = "",
"Глюкоза в норме(%)" = "",
"Глюкоза выше нормы(%)" = "")
first_month <- first_week
half_year <- first_week
# Список файлов для анализа
all_file_list <- list.files("Filtered_Data")
# Цикл для формирования таблиц с данными по трем временным периодам - первая неделя, через один месяц и через полгода
for(w in 1:30){
dataset <- read.csv(paste0("C:/Users/79214/Documents/BioStat_2023/GitHub/Filtered_data", all_file_list[w]), encoding = "UTF-8")
# Функция для возвращения временных отрезков
time_function(dataset)
# Результаты для первой недели
if(nrow(time_period_1) - 1 >= 2){ # Проверка на ненулевое значение периода
info_function_GL(time_period_1$`Отметка.времени.устройства`, time_period_1$`Данные.по.глюкозе`)
first_week <- bind_rows(first_week, data_info)
}else{
first_week <- bind_rows(first_week, data.frame("Общее время(мин.)" = NA,
"Время пропусков(%)" = NA,
"Среднее значение глюкозы" = NA,
"Глюкоза ниже нормы(%)" = NA,
"Глюкоза в норме(%)" = NA,
"Глюкоза выше нормы(%)" = NA))
}
# Результаты через один месяц
if(nrow(time_period_2) - 1 >= 2){ # Проверка на ненулевое значение периода
info_function_GL(time_period_2$`Отметка.времени.устройства`, time_period_2$`Данные.по.глюкозе`)
first_month <- bind_rows(first_month, data_info)
}else{
first_month <- bind_rows(first_month, data.frame("Общее время(мин.)" = NA,
"Время пропусков(%)" = NA,
"Среднее значение глюкозы" = NA,
"Глюкоза ниже нормы(%)" = NA,
"Глюкоза в норме(%)" = NA,
"Глюкоза выше нормы(%)" = NA))
}
# Результаты через полгода
if(nrow(time_period_3) - 1 >= 2){ # Проверка на ненулевое значение периода
info_function_GL(time_period_3$`Отметка.времени.устройства`, time_period_3$`Данные.по.глюкозе`)
half_year <- bind_rows(half_year, data_info)
}else{
half_year <- bind_rows(half_year, data.frame("Общее время(мин.)" = NA,
"Время пропусков(%)" = NA,
"Среднее значение глюкозы" = NA,
"Глюкоза ниже нормы(%)" = NA,
"Глюкоза в норме(%)" = NA,
"Глюкоза выше нормы(%)" = NA))
}
}
setwd("C:/Users/79214/Documents/BioStat_2023/GitHub")
# Обнулим data.frame по трем интересующим нас периодам времени
first_week <- data.frame("Общее время(мин.)" = "",
"Время пропусков(%)" = "",
"Среднее значение глюкозы" = "",
"Глюкоза ниже нормы(%)" = "",
"Глюкоза в норме(%)" = "",
"Глюкоза выше нормы(%)" = "")
first_month <- first_week
half_year <- first_week
# Список файлов для анализа
all_file_list <- list.files("Filtered_Data")
# Цикл для формирования таблиц с данными по трем временным периодам - первая неделя, через один месяц и через полгода
for(w in 1:30){
dataset <- read.csv(paste0("Filtered_data/", all_file_list[w]), encoding = "UTF-8")
# Функция для возвращения временных отрезков
time_function(dataset)
# Результаты для первой недели
if(nrow(time_period_1) - 1 >= 2){ # Проверка на ненулевое значение периода
info_function_GL(time_period_1$`Отметка.времени.устройства`, time_period_1$`Данные.по.глюкозе`)
first_week <- bind_rows(first_week, data_info)
}else{
first_week <- bind_rows(first_week, data.frame("Общее время(мин.)" = NA,
"Время пропусков(%)" = NA,
"Среднее значение глюкозы" = NA,
"Глюкоза ниже нормы(%)" = NA,
"Глюкоза в норме(%)" = NA,
"Глюкоза выше нормы(%)" = NA))
}
# Результаты через один месяц
if(nrow(time_period_2) - 1 >= 2){ # Проверка на ненулевое значение периода
info_function_GL(time_period_2$`Отметка.времени.устройства`, time_period_2$`Данные.по.глюкозе`)
first_month <- bind_rows(first_month, data_info)
}else{
first_month <- bind_rows(first_month, data.frame("Общее время(мин.)" = NA,
"Время пропусков(%)" = NA,
"Среднее значение глюкозы" = NA,
"Глюкоза ниже нормы(%)" = NA,
"Глюкоза в норме(%)" = NA,
"Глюкоза выше нормы(%)" = NA))
}
# Результаты через полгода
if(nrow(time_period_3) - 1 >= 2){ # Проверка на ненулевое значение периода
info_function_GL(time_period_3$`Отметка.времени.устройства`, time_period_3$`Данные.по.глюкозе`)
half_year <- bind_rows(half_year, data_info)
}else{
half_year <- bind_rows(half_year, data.frame("Общее время(мин.)" = NA,
"Время пропусков(%)" = NA,
"Среднее значение глюкозы" = NA,
"Глюкоза ниже нормы(%)" = NA,
"Глюкоза в норме(%)" = NA,
"Глюкоза выше нормы(%)" = NA))
}
}
setwd("C:/Users/79214/Documents/BioStat_2023/GitHub/Filtered_data")
# Обнулим data.frame по трем интересующим нас периодам времени
first_week <- data.frame("Общее время(мин.)" = "",
"Время пропусков(%)" = "",
"Среднее значение глюкозы" = "",
"Глюкоза ниже нормы(%)" = "",
"Глюкоза в норме(%)" = "",
"Глюкоза выше нормы(%)" = "")
first_month <- first_week
half_year <- first_week
# Список файлов для анализа
all_file_list <- list.files("Filtered_Data")
# Цикл для формирования таблиц с данными по трем временным периодам - первая неделя, через один месяц и через полгода
for(w in 1:30){
dataset <- read.csv(paste0("Filtered_data/", all_file_list[w]), encoding = "UTF-8")
# Функция для возвращения временных отрезков
time_function(dataset)
# Результаты для первой недели
if(nrow(time_period_1) - 1 >= 2){ # Проверка на ненулевое значение периода
info_function_GL(time_period_1$`Отметка.времени.устройства`, time_period_1$`Данные.по.глюкозе`)
first_week <- bind_rows(first_week, data_info)
}else{
first_week <- bind_rows(first_week, data.frame("Общее время(мин.)" = NA,
"Время пропусков(%)" = NA,
"Среднее значение глюкозы" = NA,
"Глюкоза ниже нормы(%)" = NA,
"Глюкоза в норме(%)" = NA,
"Глюкоза выше нормы(%)" = NA))
}
# Результаты через один месяц
if(nrow(time_period_2) - 1 >= 2){ # Проверка на ненулевое значение периода
info_function_GL(time_period_2$`Отметка.времени.устройства`, time_period_2$`Данные.по.глюкозе`)
first_month <- bind_rows(first_month, data_info)
}else{
first_month <- bind_rows(first_month, data.frame("Общее время(мин.)" = NA,
"Время пропусков(%)" = NA,
"Среднее значение глюкозы" = NA,
"Глюкоза ниже нормы(%)" = NA,
"Глюкоза в норме(%)" = NA,
"Глюкоза выше нормы(%)" = NA))
}
# Результаты через полгода
if(nrow(time_period_3) - 1 >= 2){ # Проверка на ненулевое значение периода
info_function_GL(time_period_3$`Отметка.времени.устройства`, time_period_3$`Данные.по.глюкозе`)
half_year <- bind_rows(half_year, data_info)
}else{
half_year <- bind_rows(half_year, data.frame("Общее время(мин.)" = NA,
"Время пропусков(%)" = NA,
"Среднее значение глюкозы" = NA,
"Глюкоза ниже нормы(%)" = NA,
"Глюкоза в норме(%)" = NA,
"Глюкоза выше нормы(%)" = NA))
}
}
all_file_list
# Список файлов для анализа
all_file_list <- list.files("C:/Users/79214/Documents/BioStat_2023/GitHub/Filtered_data")
# Обнулим data.frame по трем интересующим нас периодам времени
first_week <- data.frame("Общее время(мин.)" = "",
"Время пропусков(%)" = "",
"Среднее значение глюкозы" = "",
"Глюкоза ниже нормы(%)" = "",
"Глюкоза в норме(%)" = "",
"Глюкоза выше нормы(%)" = "")
first_month <- first_week
half_year <- first_week
# Список файлов для анализа
all_file_list <- list.files("C:/Users/79214/Documents/BioStat_2023/GitHub/Filtered_data")
# Цикл для формирования таблиц с данными по трем временным периодам - первая неделя, через один месяц и через полгода
for(w in 1:30){
dataset <- read.csv(paste0("Filtered_data/", all_file_list[w]), encoding = "UTF-8")
# Функция для возвращения временных отрезков
time_function(dataset)
# Результаты для первой недели
if(nrow(time_period_1) - 1 >= 2){ # Проверка на ненулевое значение периода
info_function_GL(time_period_1$`Отметка.времени.устройства`, time_period_1$`Данные.по.глюкозе`)
first_week <- bind_rows(first_week, data_info)
}else{
first_week <- bind_rows(first_week, data.frame("Общее время(мин.)" = NA,
"Время пропусков(%)" = NA,
"Среднее значение глюкозы" = NA,
"Глюкоза ниже нормы(%)" = NA,
"Глюкоза в норме(%)" = NA,
"Глюкоза выше нормы(%)" = NA))
}
# Результаты через один месяц
if(nrow(time_period_2) - 1 >= 2){ # Проверка на ненулевое значение периода
info_function_GL(time_period_2$`Отметка.времени.устройства`, time_period_2$`Данные.по.глюкозе`)
first_month <- bind_rows(first_month, data_info)
}else{
first_month <- bind_rows(first_month, data.frame("Общее время(мин.)" = NA,
"Время пропусков(%)" = NA,
"Среднее значение глюкозы" = NA,
"Глюкоза ниже нормы(%)" = NA,
"Глюкоза в норме(%)" = NA,
"Глюкоза выше нормы(%)" = NA))
}
# Результаты через полгода
if(nrow(time_period_3) - 1 >= 2){ # Проверка на ненулевое значение периода
info_function_GL(time_period_3$`Отметка.времени.устройства`, time_period_3$`Данные.по.глюкозе`)
half_year <- bind_rows(half_year, data_info)
}else{
half_year <- bind_rows(half_year, data.frame("Общее время(мин.)" = NA,
"Время пропусков(%)" = NA,
"Среднее значение глюкозы" = NA,
"Глюкоза ниже нормы(%)" = NA,
"Глюкоза в норме(%)" = NA,
"Глюкоза выше нормы(%)" = NA))
}
}
# Обнулим data.frame по трем интересующим нас периодам времени
first_week <- data.frame("Общее время(мин.)" = "",
"Время пропусков(%)" = "",
"Среднее значение глюкозы" = "",
"Глюкоза ниже нормы(%)" = "",
"Глюкоза в норме(%)" = "",
"Глюкоза выше нормы(%)" = "")
first_month <- first_week
half_year <- first_week
# Список файлов для анализа
all_file_list <- list.files("C:/Users/79214/Documents/BioStat_2023/GitHub/Filtered_data")
# Цикл для формирования таблиц с данными по трем временным периодам - первая неделя, через один месяц и через полгода
for(w in 1:30){
dataset <- read.csv(paste0("C:/Users/79214/Documents/BioStat_2023/GitHub/Filtered_data/", all_file_list[w]), encoding = "UTF-8")
# Функция для возвращения временных отрезков
time_function(dataset)
# Результаты для первой недели
if(nrow(time_period_1) - 1 >= 2){ # Проверка на ненулевое значение периода
info_function_GL(time_period_1$`Отметка.времени.устройства`, time_period_1$`Данные.по.глюкозе`)
first_week <- bind_rows(first_week, data_info)
}else{
first_week <- bind_rows(first_week, data.frame("Общее время(мин.)" = NA,
"Время пропусков(%)" = NA,
"Среднее значение глюкозы" = NA,
"Глюкоза ниже нормы(%)" = NA,
"Глюкоза в норме(%)" = NA,
"Глюкоза выше нормы(%)" = NA))
}
# Результаты через один месяц
if(nrow(time_period_2) - 1 >= 2){ # Проверка на ненулевое значение периода
info_function_GL(time_period_2$`Отметка.времени.устройства`, time_period_2$`Данные.по.глюкозе`)
first_month <- bind_rows(first_month, data_info)
}else{
first_month <- bind_rows(first_month, data.frame("Общее время(мин.)" = NA,
"Время пропусков(%)" = NA,
"Среднее значение глюкозы" = NA,
"Глюкоза ниже нормы(%)" = NA,
"Глюкоза в норме(%)" = NA,
"Глюкоза выше нормы(%)" = NA))
}
# Результаты через полгода
if(nrow(time_period_3) - 1 >= 2){ # Проверка на ненулевое значение периода
info_function_GL(time_period_3$`Отметка.времени.устройства`, time_period_3$`Данные.по.глюкозе`)
half_year <- bind_rows(half_year, data_info)
}else{
half_year <- bind_rows(half_year, data.frame("Общее время(мин.)" = NA,
"Время пропусков(%)" = NA,
"Среднее значение глюкозы" = NA,
"Глюкоза ниже нормы(%)" = NA,
"Глюкоза в норме(%)" = NA,
"Глюкоза выше нормы(%)" = NA))
}
}
View(time_function)
time_period_1 <- data.frame("", "")
View(time_period_1)
time_period_1 <- glucose_level
View(time_period_1)
retro <- data %>%
filter(c(`Ретроспективные.данные.по.глюкозе.ммоль.л` != "" &
is.na(`Ретроспективные.данные.по.глюкозе.ммоль.л`) == FALSE)) %>%
select(`Отметка.времени.устройства`, `Ретроспективные.данные.по.глюкозе.ммоль.л`) %>%
rename(`Данные.по.глюкозе` = `Ретроспективные.данные.по.глюкозе.ммоль.л`)
first_week <- data.frame("Общее время(мин.)" = "",
"Время пропусков(%)" = "",
"Среднее значение глюкозы" = "",
"Глюкоза ниже нормы(%)" = "",
"Глюкоза в норме(%)" = "",
"Глюкоза выше нормы(%)" = "")
first_month <- first_week
half_year <- first_week
# Список файлов для анализа
all_file_list <- list.files("C:/Users/79214/Documents/BioStat_2023/GitHub/Filtered_data")
# Цикл для формирования таблиц с данными по трем временным периодам - первая неделя, через один месяц и через полгода
for(w in 1:30){
dataset <- read.csv(paste0("C:/Users/79214/Documents/BioStat_2023/GitHub/Filtered_data/", all_file_list[w]), encoding = "UTF-8")
# Функция для возвращения временных отрезков
time_function(dataset)
# Функция для возвращения временных отрезков
print(time_function(dataset))
View(dataset)
View(dataset)
View(dataset)
View(men_table_plot)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(psych)
library(dplyr)
library(tidyr)
library(readr)
library(stringr)
library(readxl)
model <- lm(number ~ ((continuous_date)^3, men_table_plot))
model <- lm(number ~ (continuous_date)^3, men_table_plot)
men_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + geom_smooth(method = model)
View(model)
men_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + geom_smooth(method = lm, formula = number ~ (continuous_date)^3)
men_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + stat_smooth(method = lm, formula = number ~ (continuous_date)^3)
men_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + stat_smooth(se= FALSE ) +
stat_regline_equation(label.x.npc = " center ")
library (ggpubr)
men_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + stat_smooth(se= FALSE ) +
stat_regline_equation(label.x.npc = " center ")
men_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + stat_smooth() +
stat_regline_equation(label.x.npc = " center ")
men_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + stat_smooth(y ~ poly(x, 3)) +
stat_regline_equation(label.x.npc = " center ")
men_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + stat_smooth(formula = y ~ poly(x, 3)) +
stat_regline_equation(label.x.npc = " center ")
men_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + stat_smooth(formula = y ~ poly(x, 5)) +
stat_regline_equation(label.x.npc = " center ")
men_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + stat_smooth(formula = y ~ poly(x, 2)) +
stat_regline_equation(label.x.npc = " center ")
men_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + stat_smooth(formula = number ~ poly(continuous_date, 3)) +
stat_regline_equation(label.x.npc = " center ")
men_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + stat_smooth(formula = number ~ poly(continuous_date, 2))
men_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + geom_smooth(formula = number ~ poly(continuous_date, 2))
men_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + geom_smooth(method = lm, formula = number ~ poly(continuous_date, 2))
men_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + stat_smooth(method = lm, formula = number ~ poly(continuous_date, 3))
women_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + geom_smooth()
women_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + geom_smooth() +
ggtitle("Зависимсоть количества сканирований от дня участия (женщины)") +
labs(x = "День исследования", y = "Количество сканирований")
men_table_plot %>% ggplot(aes(x = continuous_date, y = as.numeric(number))) +
geom_point() + geom_smooth() +
ggtitle("Зависимсоть количества сканирований от дня участия (мужчины)") +
labs(x = "День исследования", y = "Количество сканирований")
